#!/usr/bin/env ruby

require 'rubygems'
require 'bundler'
Bundler.setup :default

require 'gli'
require 'trema'

# patch_panel command
module PatchPanelApp
  extend GLI::App

  desc 'Creates a new patch'
  arg_name 'dpid port#1 port#2'
  command :create do |c|
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, args|
      dpid = args[0].hex
      port1 = args[1].to_i
      port2 = args[2].to_i
      Trema.trema_process('PatchPanel', options[:socket_dir]).controller.
        create_patch(dpid, port1, port2)
    end
  end

  desc 'Deletes a patch'
  arg_name 'dpid port#1 port#2'
  command :delete do |c|
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, args|
      dpid = args[0].hex
      port1 = args[1].to_i
      port2 = args[2].to_i
      Trema.trema_process('PatchPanel', options[:socket_dir]).controller.
        delete_patch(dpid, port1, port2)
    end
  end

  desc 'Create a mirror'
  arg_name 'dpid port mirror'
  command :m_create do |c|
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, args|
      dpid = args[0].hex
      port = args[1].to_i
      mirror = args[2].to_i
      Trema.trema_process('PatchPanel', options[:socket_dir]).controller.
        create_mirror_patch(dpid, port, mirror)
    end
  end

  desc 'Delete a mirror'
  arg_name 'dpid port mirror'
  command :m_delete do |c|
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, args|
      dpid = args[0].hex
      port = args[1].to_i
      mirror = args[2].to_i
      Trema.trema_process('PatchPanel', options[:socket_dir]).controller.
        delete_mirror_patch(dpid, port, mirror)
    end
  end

  desc 'Print patches and mirrors'
  arg_name 'dpid ret patch m_patch'
  command :print do |c|
    c.desc 'Location to find socket files'
    c.flag [:S, :socket_dir], default_value: Trema::DEFAULT_SOCKET_DIR

    c.action do |_global_options, options, args|
      dpid = args[0].hex
      ret = Trema.trema_process('PatchPanel', options[:socket_dir]).controller.
        print_patch_mirror(dpid)
      @patch = ret[0]
      @m_patch = ret[1]
      p "Patch list: (port <=> port)"
      @patch[dpid].each do |port_a, port_b|
        print(port_a, " <=> ", port_b, "\n")
      end
      p "Mirror list: (port => mirror)"
      @m_patch[dpid].each do |port, mirror|
        print(port, " => ", mirror, "\n")
      end
    end
  end

  exit run(ARGV)
end
